/*
 * ark/v1/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use bitcoin::address::NetworkUnchecked;
use bitcoin::secp256k1;
use bitcoin::Address;
use bitcoin::Amount;
use bitcoin::Denomination;
use bitcoin::Network;
use serde::Deserialize;
use serde::Serialize;
use std::error::Error as StdError;
use std::fmt;
use std::str::FromStr;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1GetInfoResponse {
    #[serde(rename = "pubkey", skip_serializing_if = "Option::is_none")]
    pub pubkey: Option<String>,
    #[serde(rename = "vtxoTreeExpiry", skip_serializing_if = "Option::is_none")]
    pub vtxo_tree_expiry: Option<String>,
    #[serde(
        rename = "unilateralExitDelay",
        skip_serializing_if = "Option::is_none"
    )]
    pub unilateral_exit_delay: Option<String>,
    #[serde(rename = "roundInterval", skip_serializing_if = "Option::is_none")]
    pub round_interval: Option<String>,
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    #[serde(rename = "dust", skip_serializing_if = "Option::is_none")]
    pub dust: Option<String>,
    #[serde(
        rename = "boardingDescriptorTemplate",
        skip_serializing_if = "Option::is_none"
    )]
    pub boarding_descriptor_template: Option<String>,
    #[serde(
        rename = "vtxoDescriptorTemplates",
        skip_serializing_if = "Option::is_none"
    )]
    pub vtxo_descriptor_templates: Option<Vec<String>>,
    #[serde(rename = "forfeitAddress", skip_serializing_if = "Option::is_none")]
    pub forfeit_address: Option<String>,
    #[serde(rename = "marketHour", skip_serializing_if = "Option::is_none")]
    pub market_hour: Option<Box<models::V1MarketHour>>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "utxoMinAmount", skip_serializing_if = "Option::is_none")]
    pub utxo_min_amount: Option<String>,
    #[serde(rename = "utxoMaxAmount", skip_serializing_if = "Option::is_none")]
    pub utxo_max_amount: Option<String>,
    #[serde(rename = "vtxoMinAmount", skip_serializing_if = "Option::is_none")]
    pub vtxo_min_amount: Option<String>,
    #[serde(rename = "vtxoMaxAmount", skip_serializing_if = "Option::is_none")]
    pub vtxo_max_amount: Option<String>,
    #[serde(rename = "boardingExitDelay", skip_serializing_if = "Option::is_none")]
    pub boarding_exit_delay: Option<String>,
}

impl V1GetInfoResponse {
    pub fn new() -> V1GetInfoResponse {
        V1GetInfoResponse {
            pubkey: None,
            vtxo_tree_expiry: None,
            unilateral_exit_delay: None,
            round_interval: None,
            network: None,
            dust: None,
            boarding_descriptor_template: None,
            vtxo_descriptor_templates: None,
            forfeit_address: None,
            market_hour: None,
            version: None,
            utxo_min_amount: None,
            utxo_max_amount: None,
            vtxo_min_amount: None,
            vtxo_max_amount: None,
            boarding_exit_delay: None,
        }
    }
}

#[derive(Debug)]
pub enum ConversionError {
    MissingPubkey,
    MissingRoundLifetime,
    MissingUnilateralExitDelay,
    MissingBoardingExitDelay,
    MissingVtxoTreeExpiry,
    MissingRoundInterval,
    MissingNetwork,
    MissingDust,
    MissingForfeitAddress,
    InvalidNetwork,
    ParseError(&'static str),
    MissingVersion,
    MissingUtxoMinAmount,
    MissingUtxoMaxAmount,
    MissingVtxoMinAmount,
    MissingVtxoMaxAmount,
}

impl fmt::Display for ConversionError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            ConversionError::MissingPubkey => write!(f, "Missing pubkey field"),
            ConversionError::MissingRoundLifetime => write!(f, "Missing round lifetime field"),
            ConversionError::MissingVtxoTreeExpiry => write!(f, "Missing VTXO tree expiry field"),
            ConversionError::MissingUnilateralExitDelay => {
                write!(f, "Missing unilateral exit delay field")
            }
            ConversionError::MissingBoardingExitDelay => {
                write!(f, "Missing boarding exit delay field")
            }
            ConversionError::MissingRoundInterval => write!(f, "Missing round interval field"),
            ConversionError::MissingNetwork => write!(f, "Missing network field"),
            ConversionError::MissingDust => write!(f, "Missing dust field"),
            ConversionError::InvalidNetwork => write!(f, "Invalid network value"),
            ConversionError::MissingForfeitAddress => write!(f, "Missing forfeit address"),
            ConversionError::MissingVersion => write!(f, "Missing version field"),
            ConversionError::ParseError(msg) => write!(f, "Parse error: {}", msg),
            ConversionError::MissingUtxoMinAmount => write!(f, "Missing UTXO minimum amount"),
            ConversionError::MissingUtxoMaxAmount => write!(f, "Missing UTXO maximum amount"),
            ConversionError::MissingVtxoMinAmount => write!(f, "Missing VTXO minimum amount"),
            ConversionError::MissingVtxoMaxAmount => write!(f, "Missing VTXO maximum amount"),
        }
    }
}

impl StdError for ConversionError {}

impl TryFrom<V1GetInfoResponse> for ark_core::server::Info {
    type Error = ConversionError;

    fn try_from(value: V1GetInfoResponse) -> Result<Self, Self::Error> {
        let pubkey = value.pubkey.ok_or(ConversionError::MissingPubkey)?;
        let pubkey = secp256k1::PublicKey::from_str(pubkey.as_str())
            .map_err(|_| ConversionError::ParseError("Failed parsing pubkey"))?;

        let round_interval = value
            .round_interval
            .ok_or(ConversionError::MissingRoundInterval)?
            .parse::<i64>()
            .map_err(|_| ConversionError::ParseError("Failed to parse round_interval"))?;

        let network = value.network.ok_or(ConversionError::MissingNetwork)?;
        let network =
            Network::from_str(network.as_str()).map_err(|_| ConversionError::InvalidNetwork)?;

        let dust = value.dust.ok_or(ConversionError::MissingDust)?;
        let dust = Amount::from_str_in(dust.as_str(), Denomination::Satoshi)
            .map_err(|_| ConversionError::ParseError("Failed to parse dust"))?;

        let vtxo_tree_expiry = value
            .vtxo_tree_expiry
            .ok_or(ConversionError::MissingVtxoTreeExpiry)?
            .parse()
            .map_err(|_| ConversionError::ParseError("Failed to parse vtxo_tree_expiry"))?;

        let unilateral_exit_delay = value
            .unilateral_exit_delay
            .ok_or(ConversionError::MissingUnilateralExitDelay)?
            .parse()
            .map_err(|_| ConversionError::ParseError("Failed to parse unilateral_exit_delay"))?;

        let boarding_exit_delay = value
            .boarding_exit_delay
            .ok_or(ConversionError::MissingBoardingExitDelay)?
            .parse()
            .map_err(|_| ConversionError::ParseError("Failed to parse boarding_exit_delay"))?;

        let forfeit_address = value
            .forfeit_address
            .ok_or(ConversionError::MissingForfeitAddress)?;
        let forfeit_address: Address<NetworkUnchecked> = forfeit_address
            .parse()
            .map_err(|_| ConversionError::ParseError("Failed parsing forfeit address"))?;

        let version = value.version.ok_or(ConversionError::MissingVersion)?;

        let utxo_min_amount = value
            .utxo_min_amount
            .ok_or(ConversionError::MissingUtxoMinAmount)?
            .parse::<i64>()
            .map_err(|_| ConversionError::ParseError("Failed parsing utxo_min_amount"))?;

        let utxo_min_amount = match utxo_min_amount.is_negative() {
            true => None,
            false => Some(Amount::from_sat(utxo_min_amount as u64)),
        };

        let utxo_max_amount = value
            .utxo_max_amount
            .ok_or(ConversionError::MissingUtxoMaxAmount)?
            .parse::<i64>()
            .map_err(|_| ConversionError::ParseError("Failed parsing utxo_max_amount"))?;

        let utxo_max_amount = match utxo_max_amount.is_negative() {
            true => None,
            false => Some(Amount::from_sat(utxo_max_amount as u64)),
        };

        let vtxo_min_amount = value
            .vtxo_min_amount
            .ok_or(ConversionError::MissingVtxoMinAmount)?
            .parse::<i64>()
            .map_err(|_| ConversionError::ParseError("Failed parsing vtxo_min_amount"))?;

        let vtxo_min_amount = match vtxo_min_amount.is_negative() {
            true => None,
            false => Some(Amount::from_sat(vtxo_min_amount as u64)),
        };

        let vtxo_max_amount = value
            .vtxo_max_amount
            .ok_or(ConversionError::MissingVtxoMaxAmount)?
            .parse::<i64>()
            .map_err(|_| ConversionError::ParseError("Failed parsing vtxo_max_amount"))?;

        let vtxo_max_amount = match vtxo_max_amount.is_negative() {
            true => None,
            false => Some(Amount::from_sat(vtxo_max_amount as u64)),
        };

        Ok(ark_core::server::Info {
            pk: pubkey,
            vtxo_tree_expiry,
            unilateral_exit_delay,
            boarding_exit_delay,
            round_interval,
            network,
            dust,
            forfeit_address: forfeit_address.assume_checked(),
            version,
            utxo_min_amount,
            utxo_max_amount,
            vtxo_min_amount,
            vtxo_max_amount,
        })
    }
}
